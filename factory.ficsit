local card = computer.getPCIDevices(classes.FINInternetCard)[1]
local req1 = card:request("https://raw.githubusercontent.com/Grisu140983/satisfactory/main/icons.ficsit", "GET", "")
local _, iconData = req1:await()

function parseStringToTable(str)
    local tbl = {}  -- Neue Tabelle erstellen
    -- Entferne Leerzeichen und Zeilenumbrüche
    str = str:gsub("%s+", "")
    -- Entferne geschweifte Klammern
    str = str:gsub("{(.-)}", "%1")
    -- Teile den String an ","
    local pairs = {}
    for pair in str:gmatch("[^,]+") do
        table.insert(pairs, pair)
    end
    -- Iteriere über die Paare und teile sie in Schlüssel und Wert auf
    for _, pair in ipairs(pairs) do
        local key, value = pair:match("(.-)%s?=%s?(.+)")
        tbl[key] = value
    end
    return tbl
end

function round(number, decimals)
    decimals = decimals or 0
    local shift = 10 ^ decimals
    local rounded = math.floor(number * shift + 0.5) / shift
    if decimals == 0 then
        return math.floor(rounded)
    else
        return rounded
    end
end

function initScreen()
	monitor = component.proxy(component.findComponent("monitor"))[1]

	-- init gpu and screen
	local gpu = computer.getPCIDevices(classes.GPU_T1_C)[1]
	local screen = component.proxy(component.findComponent(classes.screen))[1]

	gpu:setSize(120,40)
	displayw,displayh = gpu:getsize()

   	-- bind display to gpu 
   	gpu:bindscreen(monitor)
   	return gpu
end

function getProductivity()
	constructors = component.proxy(component.findComponent(classes.Build_ConstructorMk1_C))		
	productivity = {}
			
	for _,constructor in pairs(constructors) do
		average = average + constructor.productivity
		amount = constructor:getRecipe():getProducts()[1].amount
		duration = constructor:getRecipe().duration
		if (constructor.standby == false ) 
		then 
			production = 60 / amount / duration * constructor.productivity
			output = output + production
			activeConst = activeConst + 1
		end
	end
	
	productivity[0] = "Produktivität:" .. round(average / activeConst * 100, 0) .. " %\nOutput: " .. round(output,0) .. " / min"

	return productivity
end

function printScreen()
	-- clean screen
	gpu:setBackground(0,0,0,0)
	gpu:fill(0,0,displayw,displayh," ")
	displayw,displayh = gpu:getsize()
	gpu:setForeGround(1,1,1,1)
	gpu:setText(1,1,"Factory Manager")
	setMonitorData(gpu)
	gpu:flush()
end

function setMonitorData(gpu)

	config = getConfig()
	
	local icons = parseStringToTable(iconData)
	
	machines = component.proxy(component.findComponent("factory_machine"))
		
	local maschinentyp = machines[1]:getType()
		
	if component.proxy(component.findComponent(classes.Build_ConstructorMk1_C)[1]) ~= nil then
    	slots = 1
    	mName = "Konstruktor"
	elseif component.proxy(component.findComponent(classes.Build_AssemblerMk1_C)[1]) ~= nil then
    	slots = 2
    	mName = "Fabrikator"
	elseif component.proxy(component.findComponent(classes.Manufacturer)[1]) ~= nil then
    	slots = 4
    	mName = "Manufaktor"
	else
    	slots = 0
	end
		
	recipe = machines[1]:getRecipe().name
	newrecipe = string.gsub(recipe, "%s", "")
	iconNr = icons[newrecipe]
						
	gpu:setText(1,2,("Produktion: " .. recipe))
	gpu:setText(1,8,mName)
	gpu:setText(15,8,"Produktivität")
	gpu:setText(30,8,"Fortschritt")
	for itemSlot = 1, slots do
    	gpu:setText(45 + (itemSlot - 1) * 15, 8, machines[1]:getRecipe():getIngredients()[itemSlot].type.name)
	end
	gpu:setText(70,8, "Taktrate")
	gpu:setText(80,8, "Output")
	
	
	local items = {}
	for itemSlot = 1, slots do
		items[1] = machines[1]:getRecipe():getIngredients()[itemSlot].type.name
	end
	
	--inputSplitter(items)	
	
	sumOutputs = 0
	sumProductivity = 0
	average = 0
	output = 0
	activeConst = 0
	
	sumMachines = 0
					
	for i in pairs(machines) do
	
		machine = machines[i]
		
		machine.potential = config/100
		progress = machine.progress
		productivity = machine.productivity
		sumProductivity = sumProductivity + productivity
		frequency = machine.potential
		average = average + productivity
		amount = machine:getRecipe():getProducts()[1].amount
		input = {}
		
		inventory = machine:getInputInv()
			
		for i = 0, 3 do
			input[i] = inventory:getStack(i)
		end		
		
		for itemSlot = 0, slots-1 do
			gpu:setText(45,i+8, input[itemSlot].count)
		end
				
		duration = machine:getRecipe().duration
		production = 60 / amount / duration * productivity
		output = output + production
		
		singleoutput = 60 / machine.cycletime * productivity
		
		
		sumOutputs = sumOutputs + singleoutput
		
		sumMachines = sumMachines + 1
				
		gpu:setText(01,i+8,i)
		gpu:setText(15,i+8,round(productivity*100,0) .. "%")
		-- gpu:setText(30,i+3,round(progress*100,0) .. "%")
		gpu:setText(30,i+8,loadingbar(progress*10))
		gpu:setText(70,i+8, round((frequency*100),0) .."%")
		gpu:setText(80,i+8, round((singleoutput),2).."/min")			
	end	
		
	sumEfficienty = ( sumProductivity/sumMachines ) * 100
	potential = machines[1].potential
		
	gpu:setText(15,sumMachines+10, round((sumEfficienty),0).."%")
	gpu:setText(1,sumMachines+10, "Gesamt:")
	gpu:setText(80,sumMachines+10, round((sumOutputs),2).."/min")	
		
	gpu:setText(1,3, "Rohstoffe:")
	for itemSlot = 1, slots do
		gpu:setText(20,3, machines[1]:getRecipe():getIngredients()[itemSlot].type.name )
	end
	for itemSlot = 1, slots do
		gpu:setText(15,2+itemSlot, round(60 / machines[1].cycleTime * (machines[1]:getRecipe():getIngredients()[itemSlot].amount) * sumMachines, 0))	
	end
	
	clock = round((potential*100),0)
	
	writeDisplay(recipe,"display_title","Name")
	event.pull(0.125)			
	writeDisplay(clock .."%","display_clock","Name")	
	writeDisplay(round((sumEfficienty),0).."%","display_productivity","Name")	
	writeDisplay(round((sumOutputs),2).."/min","display_output","Name")	
	writeDisplay(iconNr,"display_title","Icon")
end

function writeDisplay(content,display,type)
	displays = component.proxy(component.findComponent(display))
		
	for _,display in pairs(displays) do
		signData = display:getPrefabSignData()
				
		if type == "Name" then 
			signData:setTextElement("Name", content)
		end
		if type == "Icon" then	
			signData:setIconElement("Icon", content)
		end
			
		display:setPrefabSignData(signData)
	end
end

function getConfig()
	controlpanels= component.proxy(component.findComponent("control_panel"))
	controlpanel = controlpanels[1]
	clockPoti = controlpanel:getModule(1,1)
	clockView = controlpanel:getModule(0,0)
		
	clockPoti.max = 100
	clockPoti.min = 10
	
	machineClock = clockPoti.value
	clockView:setText(machineClock)
	
	return machineClock
end

function inputSplitter(items)
	inputSP = component.proxy(component.findComponent("splitter"))
	splitter = inputSP[1]
	
	local success, input = pcall(splitter.getInput, splitter)
	
	local function checkAndTransferItem(input)
    local spInput = input.type and input.type.name or nil
    if not spInput then
    	return
    end
    
    local found = false
    for _, v in ipairs(items) do
        if v == spInput then
            splitter:transferItem(2)
            found = true
            break
        end
    end
    
    if not found then
        splitter:transferItem(1)
    end
end
	
	if success then
		checkAndTransferItem(input)
	else
    	print("Fehler beim Aufrufen von getInput():", input)
	end
end

function loadingbar(value)
	string = ""
	for i = 0, value do
	
		string = string .."░"
	end
	return string
end

print("Starting ficsIT FactoryOS ...")
gpu = initScreen()
event.pull(0.1)
print("ficsIT FactoryOS is running!")


local icons = parseStringToTable(iconData)

while true do
	printScreen(gpu)
end